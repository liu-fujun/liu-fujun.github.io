<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习笔记-Mybatis(1)</title>
      <link href="/2020/01/22/xue-xi-bi-ji-mybatis-1/"/>
      <url>/2020/01/22/xue-xi-bi-ji-mybatis-1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><blockquote><p>MyBatis是一款优秀的基于ORM的半自动轻量级持久层框架，它支持定制化SQL、存储过程以及高级映射，使用XML或注解实现映射对应，结果集自动转换成指定类型，无需自己处理。</p></blockquote><h4 id="1-1-什么是ORM"><a href="#1-1-什么是ORM" class="headerlink" title="1.1 什么是ORM"></a>1.1 什么是ORM</h4><p>ORM全称Object/Relation Mapping：表示对象-关系映射的缩写，它完成面向对象的编程语言到关系数据库的映射。<br>采用ORM框架后，应用程序不再直接访问底层数据库，而是以面向对象的方式来操作持久化对象，而ORM框架则将这些面向对象的操作转换成底层SQL操作。<br>ORM框架实现的效果：把对持久化对象的保存、修改、删除等操作，转换为对数据库的insert、update、delete操作。</p><h4 id="1-2-什么是半自动"><a href="#1-2-什么是半自动" class="headerlink" title="1.2 什么是半自动"></a>1.2 什么是半自动</h4><p>简单来说，半自动就是还需要开发人员自己写核心的SQL。<br>与之对应的就是全自动，类似Hibernate等，就是无需写SQL都是全自动完成。</p><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><blockquote><p>Mybatis的配置文件一般分为两种，一个是核心配置文件，一个是映射配置文件，<br>核心配置文件配置了Mybatis的核心配置，包括数据库连接信息、是否开启缓存等；<br>映射配置文件主要是用于配置具体的映射关系的文件；</p></blockquote><h4 id="2-1-核心配置文件"><a href="#2-1-核心配置文件" class="headerlink" title="2.1 核心配置文件"></a>2.1 核心配置文件</h4><p>Mybatis的核心配置文件一般我们命名为sqlMapConfig.xml，里面配置了相关的标签，来指定一些操作（标签是存在顺序的，如果顺序写错，会有提示），具体概述如下：</p><ul><li><code>&lt;configration/&gt;</code>：顶层配置标签</li><li><code>&lt;properties/&gt;</code>：加载额外配置的properties文件</li><li><code>&lt;setting/&gt;</code>:全局配置，例如是否使用缓存、超时时间设置等</li><li><code>&lt;typeAliases/&gt;</code>：类型别名，给parameterType或者ResultType定义别名</li><li><code>&lt;typeHandlers/&gt;</code>：类型处理器，配置将sql返回的数据库类型转换为相应Java类型的处理器</li><li><code>&lt;objectFactory/&gt;</code>：对象工厂，可以继承DefaultObjectFactory来定义对象工厂</li><li><code>&lt;plugins/&gt;</code>：插件，其实就是拦截器，通过实现Interceptor接口，并添加Intercepts注解（里面可以定义多个signature去拦截多个方法）</li><li><code>&lt;environments/&gt;</code>：环境，里面可以定义多个环境变量（环境变量中可以指定事务、数据源等信息），由default来指定默认使用那个</li><li><code>&lt;databaseIdProvider/&gt;</code>：数据库厂商标识</li><li><code>&lt;mappers/&gt;</code>：需要加载的映射配置文件（可以通过package或者resource、url、class来加载一个或多个映射配置文件）</li></ul><h4 id="2-2-映射配置文件"><a href="#2-2-映射配置文件" class="headerlink" title="2.2 映射配置文件"></a>2.2 映射配置文件</h4><p>在映射配置文件中，常用的标签如下：</p><ul><li><code>&lt;resultMap/&gt;</code>来指定数据库字段名和实体类属性的对应关系。</li><li><code>&lt;parameterType/&gt;</code>：参数类型</li><li><code>&lt;resultType/&gt;或&lt;resultMap/&gt;</code>：结果类型或者使用的结果集</li><li><code>&lt;select/&gt; &lt;insert/&gt; &lt;update/&gt; &lt;delete/&gt;</code>：定义增删改查的SQL语句</li></ul><p>常用的动态标签：</p><ul><li>where：使用该标签会自动去除第一个and，不需要写where 1=1</li><li>if：根据参数对象的取值进行不同条件的判断</li><li>foreach：进行数组的循环，通过open和close属性，生成类似 id in ()或者对map进行遍历</li><li>include：进行SQL片段抽取，避免同样的SQL的重复编写</li><li>choose、when、otherwise：进行条件判断，如果不符合就是要otherwise（相当于default）</li></ul><h3 id="3-复杂映射"><a href="#3-复杂映射" class="headerlink" title="3. 复杂映射"></a>3. 复杂映射</h3><blockquote><p>复杂映射，主要是为了解决一对一、一对多、多对多的映射关系</p></blockquote><h4 id="2-1-一对一"><a href="#2-1-一对一" class="headerlink" title="2.1 一对一"></a>2.1 一对一</h4><p>在此举例说明，现有两张表，一张用户表User，一张省信息表province。<br>一个人属于一个省，当查询User信息时，也要将所属的省信息查出，这时就符合所说的一对一映射查询。<br>如果通过SQL完成查询，对应的sql语句应该是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.name, p.pname <span class="keyword">from</span> province p,<span class="keyword">user</span> u <span class="keyword">where</span> u.pid<span class="operator">=</span>p.pid;</span><br></pre></td></tr></table></figure><p>反应在Java实体上，就是<code>User</code>类中，会声明一个<code>Province</code>的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Province province;</span><br><span class="line">........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在如果通过XML方式想要在查询用户时将省信息同时查出，需要用到<code>&lt;association/&gt;</code>标签。UserMapper.xml中的resultMap需要增加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.jfl.test.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明一对一相关信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;province&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.jfl.test.Province&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>&lt;association/&gt;</code>的property属性对应实体中的属性名，里面的标签对应Province的属性。<br>此时查询结果就是如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=<span class="number">1</span>,name=<span class="string">&#x27;tom&#x27;</span>,province=Province&#123;pid=<span class="number">1</span>,pname=<span class="string">&#x27;beijing&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-一对多"><a href="#2-2-一对多" class="headerlink" title="2.2 一对多"></a>2.2 一对多</h4><p>还是上面的例子，一个省对应多个人，这种情况下想要查询一对多，通过SQL查询的话，SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.pid,p.pname,u.id,u.name <span class="keyword">from</span> province p <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> u <span class="keyword">on</span> u.pid<span class="operator">=</span>p.pid;</span><br></pre></td></tr></table></figure><p>反应在Java实体上，就是<code>Province</code>类中，会声明一个<code>List&lt;User&gt;</code>的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而mybatis的映射配置XML文件中，需要增加<code>&lt;collection /&gt;</code>配置，才可以支持一对多：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;provinceMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.jfl.test.Province&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.jfl.test.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-多对多"><a href="#2-3-多对多" class="headerlink" title="2.3 多对多"></a>2.3 多对多</h4><p>此处举例说明，一个学生学习多门课程，每门课程也有很多学生来学习。此时学生和课程的对应关系就是多对多，通常这种情况，在数据库设计时会通过中间表来实现，模型如下图：<br><img src="https://img-blog.csdnimg.cn/20201022143803542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xmajM5NzQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>此时就可以将学生和课程的多对多，看成是学生表和学生课程关系表的一对多；同理，课程和学生的关系，也可以看成是课程表和学生课程关系表的一对多。<br>所以多对多，其实就是两个一对多，具体实现参考一对多。</p>]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记-Mybatis(2)</title>
      <link href="/2020/01/22/xue-xi-bi-ji-mybatis-2/"/>
      <url>/2020/01/22/xue-xi-bi-ji-mybatis-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-mybatis注解"><a href="#1-mybatis注解" class="headerlink" title="1. mybatis注解"></a>1. mybatis注解</h2><blockquote><p>上一章介绍mybatis的使用时，主要介绍的是通过XML方式进行SQL相关配置，其实我们还可以通过注解来减少编写Mapper映射文件，本章就主要讲解相关的注解。</p></blockquote><h4 id="1-1-常用的CRUD注解"><a href="#1-1-常用的CRUD注解" class="headerlink" title="1.1 常用的CRUD注解"></a>1.1 常用的CRUD注解</h4><ul><li>@Insert：实现新增</li><li>@Update：实现更新</li><li>@Delete：实现删除</li><li>@Select：实现查询</li></ul><p>通过上面的注解，可以替代mapper.xml里面的相关SQL标签，例如通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>可以替代</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-结果集注解"><a href="#1-2-结果集注解" class="headerlink" title="1.2 结果集注解"></a>1.2 结果集注解</h4><p>在注解模式中，怎么指定返回的结果集中数据库字段与实体属性名的对应关系呢？<br>主要是通过<code>@Result和@Results</code>来实现，具体示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">   <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;name&quot;,column = &quot;name&quot;)</span></span><br><span class="line"><span class="meta">   &#125;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>其中的属性的解释：</p><ul><li>property：对应xml中resultMap的property属性，代表类属性名；</li><li>column：对象xml中resultMap的column属性，代表表字段名；</li><li>javaType：对应的java数据类型</li></ul><h4 id="1-3-复杂映射注解"><a href="#1-3-复杂映射注解" class="headerlink" title="1.3 复杂映射注解"></a>1.3 复杂映射注解</h4><p>复杂映射主要是分为一对一、一对多、多对多，通过上一章我们知道多对多就是两个一对多，所以此处只演示一对一和一对多两种情况。</p><h6 id="1-3-1-一对一"><a href="#1-3-1-一对一" class="headerlink" title="1.3.1 一对一"></a>1.3.1 一对一</h6><p>一对一的注解是<code>@One</code>,它代替了<code>&lt;association/&gt;</code>标签，来指定子查询返回的对象信息。其中的属性讲解：</p><ul><li>select：指定关联的查询方法的全限定方法名</li></ul><p>同时，<code>column</code>属性对应的<code>pid</code>值就是要传入子查询的参数。</p><p>通过上一章的用户和省信息的一对一例子来演示，通过注解实现时，等于是将查询拆分成两个，首先是查询用户、其次是查询省份信息。<br>所以我们需要在<code>ProvinceMapp.java</code>里定义查询<code>findById()</code>，提供给用户查询时调用，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;name&quot;,column = &quot;name&quot;),</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;province&quot;,column = &quot;pid&quot;,javaType = Province.class,</span></span><br><span class="line"><span class="meta">                   one=@One(select = &quot;com.jfl.test.mapper.ProvinceMapper.findById&quot;))</span></span><br><span class="line"><span class="meta">   &#125;)</span></span><br><span class="line">   <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndProvince</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>同时，在<code>ProvinceMapper.java</code>中提供如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&#123;&quot;select * from province where pid = #&#123;pid&#125;&quot;&#125;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Province <span class="title">findById</span><span class="params">(Integer pid)</span></span>;</span><br></pre></td></tr></table></figure><p>当进行用户查询时，同时将用户信息中的<code>pid</code>传入指定的省信息查询方法，最终返回用户和省信息的综合信息，完成一对一的查询。</p><h6 id="1-3-2-一对多"><a href="#1-3-2-一对多" class="headerlink" title="1.3.2 一对多"></a>1.3.2 一对多</h6><p>一对多的注解是<code>@Many</code>,它代替了<code>&lt;collection/&gt;</code>标签，来指定子查询返回的对象信息。其中的属性讲解：</p><ul><li>select：指定关联的查询方法的全限定方法名</li></ul><p>具体使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from province&quot;)</span></span><br><span class="line">   <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;pid&quot;,column = &quot;pid&quot;),</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;pname&quot;,column = &quot;pname&quot;),</span></span><br><span class="line"><span class="meta">           @Result(property = &quot;userList&quot;,column = &quot;pid&quot;,javaType = List.class,</span></span><br><span class="line"><span class="meta">               many=@Many(select = &quot;com.jfl.test.mapper.UserMapper.findUserByPid&quot;))</span></span><br><span class="line"><span class="meta">   &#125;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>同时，用户那变需要提供对应的查询方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where pid = #&#123;pid&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findUserByPid</span><span class="params">(Integer pid)</span></span>;</span><br></pre></td></tr></table></figure><p>最终就会返回一对多的结果。<br>在使用上，一对多和一对一基本一样，只有注解以及返回结果类型的差异。</p><h2 id="2-延迟加载"><a href="#2-延迟加载" class="headerlink" title="2. 延迟加载"></a>2. 延迟加载</h2><blockquote><p>延迟加载就是在需要⽤到数据时才进⾏加载，不需要⽤到数据时就不加载数据。<br>延迟加载也称懒加载。<br>延迟加载是基于嵌套查询来实现的。<br>Mybatis是支持延迟加载的，只不过默认是关闭状态。</p></blockquote><p>在开发过程中，很多时候我们并不需要在加载省份信息时就⼀定要加载关联的用户信息。此时就是我们所说的延迟加载。<br>延迟加载分为局部延迟加载和全局延迟加载，主要是根据配置的位置不同，影响的范围不同。<br>延迟加载是基于嵌套查询来实现的，因为它是将关联的查询进行延迟查询来实现延迟加载，如果使用的是<code>left join</code>或者其他非嵌套的查询，是没法进行延迟加载。</p><h4 id="2-1-局部延迟加载"><a href="#2-1-局部延迟加载" class="headerlink" title="2.1 局部延迟加载"></a>2.1 局部延迟加载</h4><p>在<code>&lt;association/&gt;</code>和<code>&lt;collection/&gt;</code>标签中都有⼀个<code>fetchType</code>属性，通过修改它的值<code>lazy </code>还是<code>eager</code>，可以修改局部的加载策略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.jfl.test.User&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> fetchType=&quot;lazy&quot; : 懒加载策略</span></span><br><span class="line"><span class="comment"> fetchType=&quot;eager&quot; : ⽴即加载策略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;province&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;province&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.jfl.test.mapper.ProvinceMapper.findById&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况下，只有这一个查询会进行延迟加载。</p><h4 id="2-2-全局延迟加载"><a href="#2-2-全局延迟加载" class="headerlink" title="2.2 全局延迟加载"></a>2.2 全局延迟加载</h4><p>想要全局的嵌套查询都进行延迟加载的话，在Mybatis的核⼼配置⽂件中可以使⽤<code>setting</code>标签修改全局的加载策略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启全局延迟加载功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：加载策略的优先级是局部高于全局，也就类似于就近原则，如果sql上配置了立即加载，就算配了全局延迟的策略，但是在这个sql执行时也不会延迟加载。</strong></p><h4 id="2-3-延迟加载触发"><a href="#2-3-延迟加载触发" class="headerlink" title="2.3 延迟加载触发"></a>2.3 延迟加载触发</h4><p>当配置了延迟加载策略后，会发现即使没有调⽤关联对象的任何⽅法，但是在调⽤当前对象的equals、clone、hashCode、toString⽅法时也会触发关联对象的查询。<br>查看源码，可以看到在<code>org.apache.ibatis.session.Configuration</code>里默认触发中有这几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">.......</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定对象的哪个方法会触发延迟加载。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Set&lt;String&gt; lazyLoadTriggerMethods = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&quot;equals&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;toString&quot;</span>));</span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决这个问题，可以通过配置覆盖掉上诉的方法，具体配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启全局延迟加载功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--所有⽅法都会延迟加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-延迟加载原理"><a href="#2-4-延迟加载原理" class="headerlink" title="2.4 延迟加载原理"></a>2.4 延迟加载原理</h4><blockquote><p>其实底层是通过动态代理(默认使⽤Javassist代理⼯⼚)来实现的延迟加载</p></blockquote><p>当查询用户时，发现如果有懒加载的配置,如：<code>fetchType=&quot;lazy&quot;</code>，则将User生成一个代理对象进行返回，并把懒加载相关对象放到<code>ResultLoaderMap</code>中存起来，当调用到懒加载相关方法时，根据代理类的<code>invoke</code>进行具体的SQL查询，最终得到结果。<br>通过<code>org.apache.ibatis.session.Configuration</code>里的<code>setProxyFactory</code>方法可以看到默认情况下使用的是<code>JavassistProxyFactory</code>，部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认使⽤Javassist代理⼯⼚</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> proxyFactory</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProxyFactory</span><span class="params">(ProxyFactory proxyFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (proxyFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">proxyFactory = <span class="keyword">new</span> JavassistProxyFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.proxyFactory = proxyFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过追踪代码，可以看到Mybatis的查询结果是由<code>ResultSetHandler</code>接⼝的<code>handleResultSets()</code>⽅法处理的，所以可以进入它唯一的实现类<code>DefaultResultSetHandler</code>来查看具体逻辑，主要方法是<code>createResultObject</code>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建映射后的结果对象</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Object <span class="title">createResultObject</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, ResultLoaderMap lazyLoader, String columnPrefix)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="comment">// useConstructorMappings ，表示是否使用构造方法创建该结果对象。此处将其重置</span></span><br><span class="line">       <span class="keyword">this</span>.useConstructorMappings = <span class="keyword">false</span>; <span class="comment">// reset previous mapping result</span></span><br><span class="line">       <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; constructorArgTypes = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 记录使用的构造方法的参数类型的数组</span></span><br><span class="line">       <span class="keyword">final</span> List&lt;Object&gt; constructorArgs = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 记录使用的构造方法的参数值的数组</span></span><br><span class="line">       <span class="comment">// 创建映射后的结果对象</span></span><br><span class="line">       Object resultObject = createResultObject(rsw, resultMap, constructorArgTypes, constructorArgs, columnPrefix);</span><br><span class="line">       <span class="keyword">if</span> (resultObject != <span class="keyword">null</span> &amp;&amp; !hasTypeHandlerForResultObject(rsw, resultMap.getType())) &#123;</span><br><span class="line">           <span class="comment">// 如果有内嵌的查询，并且开启延迟加载，则创建结果对象的代理对象</span></span><br><span class="line">           <span class="keyword">final</span> List&lt;ResultMapping&gt; propertyMappings = resultMap.getPropertyResultMappings();</span><br><span class="line">           <span class="keyword">for</span> (ResultMapping propertyMapping : propertyMappings) &#123;</span><br><span class="line">               <span class="comment">// issue gcode #109 &amp;&amp; issue #149</span></span><br><span class="line">               <span class="keyword">if</span> (propertyMapping.getNestedQueryId() != <span class="keyword">null</span> &amp;&amp; propertyMapping.isLazy()) &#123;</span><br><span class="line">                   resultObject = configuration.getProxyFactory().createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 判断是否使用构造方法创建该结果对象</span></span><br><span class="line">       <span class="keyword">this</span>.useConstructorMappings = resultObject != <span class="keyword">null</span> &amp;&amp; !constructorArgTypes.isEmpty(); <span class="comment">// set current mapping result</span></span><br><span class="line">       <span class="keyword">return</span> resultObject;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过源码会看到在发现有延迟加载的属性时，会去调用<code>configuration.getProxyFactory().createProxy()</code>产生一个代理对象并返回，<code>configuration.getProxyFactory()</code>返回的就是上面说的默认代理对象工厂<code>JavassistProxyFactory</code>，然后调用工厂的<code>createProxy()</code>方法，查看源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>看到最终返回的是<code>EnhancedResultObjectProxyImpl</code>的相关返回的结果，看到这个名字可以得到使用的应该就是<code>cglib</code>的动态代理。进入该类中，可以看到具体的<code>cglib</code>的创建逻辑以及调用时会执行的<code>invoke</code>方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">crateProxy</span><span class="params">(Class&lt;?&gt; type, MethodHandler callback, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 javassist ProxyFactory 对象</span></span><br><span class="line">        ProxyFactory enhancer = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        <span class="comment">// 设置父类</span></span><br><span class="line">        enhancer.setSuperclass(type);</span><br><span class="line">        <span class="comment">// 根据情况，设置接口为 WriteReplaceInterface 。和序列化相关，可以无视</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            type.getDeclaredMethod(WRITE_REPLACE_METHOD); <span class="comment">// 如果已经存在 writeReplace 方法，则不用设置接口为 WriteReplaceInterface</span></span><br><span class="line">            <span class="comment">// ObjectOutputStream will call writeReplace of objects returned by writeReplace</span></span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(WRITE_REPLACE_METHOD + <span class="string">&quot; method was found on bean &quot;</span> + type + <span class="string">&quot;, make sure it returns this&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            enhancer.setInterfaces(<span class="keyword">new</span> Class[]&#123;WriteReplaceInterface.class&#125;); <span class="comment">// 如果不存在 writeReplace 方法，则设置接口为 WriteReplaceInterface</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            <span class="comment">// nothing to do here</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        Object enhanced;</span><br><span class="line">        Class&lt;?&gt;[] typesArray = constructorArgTypes.toArray(<span class="keyword">new</span> Class[constructorArgTypes.size()]);</span><br><span class="line">        Object[] valuesArray = constructorArgs.toArray(<span class="keyword">new</span> Object[constructorArgs.size()]);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            enhanced = enhancer.create(typesArray, valuesArray);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">&quot;Error creating lazy proxy.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置代理对象的执行器</span></span><br><span class="line">        ((Proxy) enhanced).setHandler(callback);</span><br><span class="line">        <span class="keyword">return</span> enhanced;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到最终使用的是<code>enhancer.create</code>，所以可以确定是<code>cglib</code>动态代理来产生代理对象。<br>再查看下<code>invoke</code>方法，看具体是怎么执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FINALIZE_METHOD = <span class="string">&quot;finalize&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WRITE_REPLACE_METHOD = <span class="string">&quot;writeReplace&quot;</span>;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object enhanced, Method method, Method methodProxy, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">   <span class="comment">// 得到执行的方法名</span></span><br><span class="line">       <span class="keyword">final</span> String methodName = method.getName();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (lazyLoader) &#123;</span><br><span class="line">           <span class="comment">// 不匹配，直接进入else</span></span><br><span class="line">               <span class="keyword">if</span> (WRITE_REPLACE_METHOD.equals(methodName)) &#123;</span><br><span class="line">                   Object original;</span><br><span class="line">                   <span class="comment">// 判断构造函数是否无参</span></span><br><span class="line">                   <span class="keyword">if</span> (constructorArgTypes.isEmpty()) &#123;</span><br><span class="line">                       original = objectFactory.create(type);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       original = objectFactory.create(type, constructorArgTypes, constructorArgs);</span><br><span class="line">                   &#125;</span><br><span class="line">                   PropertyCopier.copyBeanProperties(type, enhanced, original);</span><br><span class="line">                   <span class="keyword">if</span> (lazyLoader.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">new</span> JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">return</span> original;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 是否有延迟加载</span></span><br><span class="line">                   <span class="keyword">if</span> (lazyLoader.size() &gt; <span class="number">0</span> &amp;&amp; !FINALIZE_METHOD.equals(methodName)) &#123;</span><br><span class="line">                       <span class="comment">// 加载所有延迟加载的属性</span></span><br><span class="line">                       <span class="keyword">if</span> (aggressive || lazyLoadTriggerMethods.contains(methodName)) &#123;</span><br><span class="line">                           lazyLoader.loadAll();</span><br><span class="line">                       <span class="comment">// 如果调用了 setting 方法，则不在使用延迟加载</span></span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PropertyNamer.isSetter(methodName)) &#123;</span><br><span class="line">                           <span class="keyword">final</span> String property = PropertyNamer.methodToProperty(methodName);</span><br><span class="line">                           lazyLoader.remove(property); <span class="comment">// 移除</span></span><br><span class="line">                       <span class="comment">// 如果调用了 getting 方法，则执行延迟加载</span></span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PropertyNamer.isGetter(methodName)) &#123;</span><br><span class="line">                           <span class="keyword">final</span> String property = PropertyNamer.methodToProperty(methodName);</span><br><span class="line">                           <span class="keyword">if</span> (lazyLoader.hasLoader(property)) &#123;</span><br><span class="line">                           <span class="comment">// 延迟加载单个属性</span></span><br><span class="line">                               lazyLoader.load(property);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 继续执行原方法</span></span><br><span class="line">           <span class="keyword">return</span> methodProxy.invoke(enhanced, args);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">           <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过以上源码分析，可以印证最开始所讲的，通过动态代理来实现的延迟加载。</p><h2 id="3-缓存机制"><a href="#3-缓存机制" class="headerlink" title="3. 缓存机制"></a>3. 缓存机制</h2><blockquote><p>mybatis的缓存分为一级缓存和二级缓存；<br>一级缓存默认开启，二级缓存默认关闭<br>二级缓存会引起脏读，所以不建议使用，常用redis做数据缓存</p></blockquote><h4 id="3-1-一级缓存"><a href="#3-1-一级缓存" class="headerlink" title="3.1 一级缓存"></a>3.1 一级缓存</h4><p>一级缓存的有效范围是同一个sqlSession；同一个sqlSession中执行相同的查询，第二次查询不会访问数据库，直接从一级缓存获取，返回给调用者。<br>但是如果两次查询中间有增删改操作，则会刷新一级缓存，这时第二次查询依然会去查询数据库。<br>通过分析源码，可以知道<code>一级缓存的数据结构就是一个HashMap</code>：<br><img src="https://img-blog.csdnimg.cn/20201022165105302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xmajM5NzQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>，而这个map的key就是mapperstatement（保存了要执行的SQL的信息）、参数、分页信息、最终执行的SQL来组成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为本次查询创建缓存的Key</span></span><br><span class="line">   CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br></pre></td></tr></table></figure><p>所以每一个SqISession都会存放一个map对象的引用，那什么时候会创建一级缓存的Map呢，通过源码分析得知是通过<code>BaseExecutor</code>来创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">BaseExecutor</span><span class="params">(Configuration configuration, Transaction transaction)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.transaction = transaction;</span><br><span class="line">       <span class="keyword">this</span>.deferredLoads = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line">       <span class="comment">// 创建本地缓存</span></span><br><span class="line">       <span class="keyword">this</span>.localCache = <span class="keyword">new</span> PerpetualCache(<span class="string">&quot;LocalCache&quot;</span>);</span><br><span class="line">       <span class="keyword">this</span>.localOutputParameterCache = <span class="keyword">new</span> PerpetualCache(<span class="string">&quot;LocalOutputParameterCache&quot;</span>);</span><br><span class="line">       <span class="keyword">this</span>.closed = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">       <span class="keyword">this</span>.wrapper = <span class="keyword">this</span>; <span class="comment">// 自己</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当执行查询的时候，就会先去缓存中取，如果取不到再走查询，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">&quot;executing a query&quot;</span>).object(ms.getId());</span><br><span class="line">       <span class="comment">// 已经关闭，则抛出 ExecutorException 异常</span></span><br><span class="line">       <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 清空本地缓存，如果 queryStack 为零，并且要求清空本地缓存。</span></span><br><span class="line">       <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">           clearLocalCache();</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;E&gt; list;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// queryStack + 1</span></span><br><span class="line">           queryStack++;</span><br><span class="line">           <span class="comment">// 从一级缓存中，获取查询结果</span></span><br><span class="line">           list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">           <span class="comment">// 获取到，则进行处理</span></span><br><span class="line">           <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">               handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">           <span class="comment">// 获得不到，则从数据库中查询</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// queryStack - 1</span></span><br><span class="line">           queryStack--;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// 执行延迟加载</span></span><br><span class="line">           <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">               deferredLoad.load();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// issue #601</span></span><br><span class="line">           <span class="comment">// 清空 deferredLoads</span></span><br><span class="line">           deferredLoads.clear();</span><br><span class="line">           <span class="comment">// 如果缓存级别是 LocalCacheScope.STATEMENT ，则进行清理</span></span><br><span class="line">           <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">               <span class="comment">// issue #482</span></span><br><span class="line">               clearLocalCache();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>缓存中如果查不到的话，就从数据库查，在<code>queryFromDatabase</code>方法中，会将查询结果写入localcache，内部调用的是Map的put方法，最终交给Map进行存放。</p><h4 id="3-2-二级缓存"><a href="#3-2-二级缓存" class="headerlink" title="3.2 二级缓存"></a>3.2 二级缓存</h4><p>二级缓存的原理和数据结构，和一级缓存是一样的，不过二级缓存的作用范围是基于mapper文件的namespace的，也就是说多个sqlSession可以共享一个mapper中的二级缓存区域，并且如果多个mapper的namespace相同，即使是两个mapper，那么这两个mapper中执行sql查询到的数据也将存在相同的二级缓存区域中。<br>由于二级缓存默认是关闭，如果打开需要进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其次在Mapper.xml文件中开启缓存：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>空标签说明使用mybatis自身的二级缓存，也可以进行指定：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.redis.RedisCache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个就是指定使用redis作为二级缓存。<br>使用二级缓存需要pojo实现Serializable接口，为了将缓存数据取出执行反序列化操作，因为二级缓存数据存储介质多种多样，不一定只存在内存中，有可能存在硬盘中，如果我们要再取这个缓存的话，就需要反序列化了。</p><p>上面描述的是全局的配置，如果单独开启，则在sql标签上使用<code>userCache</code>和<code>flushCache</code>等配置项，useCache为true则使用二级缓存，否则不使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByUserId&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.jfl.test.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置<code>flushCache=&quot;true”</code>则会在增删改之后刷新缓存，默认是true，如果不刷新，则会出现脏读等问题。</p><h4 id="3-3-redis做为二级缓存"><a href="#3-3-redis做为二级缓存" class="headerlink" title="3.3 redis做为二级缓存"></a>3.3 redis做为二级缓存</h4><p>使用mybatis自带的二级缓存存在以下问题：</p><ul><li>自带的二级缓存是单服务器工作，无法实现分布式缓存；</li><li>当进行嵌套查询时，A表关联的B表数据，通过A查询时，最终结果是存在A的二级缓存中，当B发生改变，A的二级缓存是不会进行刷新的，会导致脏读等问题；</li></ul><p>所以尽可能的不使用自带的二级缓存，而redis就是一个很好的分布式缓存，所以一般都是使用redis来做缓存。<br>主要的原理是redis提供的缓存，实现了mybatis的Cache接口，在配置时可以指定具体实现类，来使用redis的缓存。<br>mybatis-redis在存储数据的时候，是使用的hash结构，把cache的id作为这个hash的key (cache的id在mybatis中就是mapper的namespace)；这个mapper中的查询缓存数据作为 hash的field，需要缓存的内容直接使用SerializeUtil存储，SerializeUtil和其他的序列化类差不多，负责对象的序列化和反序列化；</p>]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
